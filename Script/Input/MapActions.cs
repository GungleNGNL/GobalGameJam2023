//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/Input/MapActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapActions"",
    ""maps"": [
        {
            ""name"": ""BuildActions"",
            ""id"": ""5d576688-253f-4116-ba5e-bea377f9b338"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""d743e9a0-86b6-465d-b7f6-4d19b8789709"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""044f9c17-153d-4f3b-a060-fc81ed8ed992"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07902df8-b8e0-4dc2-ab05-8d20597b4207"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d221d7e-82bd-4277-9b2c-ccf6bcf08945"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardAndMouse"",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardAndMouse"",
            ""bindingGroup"": ""KeyBoardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BuildActions
        m_BuildActions = asset.FindActionMap("BuildActions", throwIfNotFound: true);
        m_BuildActions_Select = m_BuildActions.FindAction("Select", throwIfNotFound: true);
        m_BuildActions_MouseMove = m_BuildActions.FindAction("MouseMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BuildActions
    private readonly InputActionMap m_BuildActions;
    private IBuildActionsActions m_BuildActionsActionsCallbackInterface;
    private readonly InputAction m_BuildActions_Select;
    private readonly InputAction m_BuildActions_MouseMove;
    public struct BuildActionsActions
    {
        private @MapActions m_Wrapper;
        public BuildActionsActions(@MapActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_BuildActions_Select;
        public InputAction @MouseMove => m_Wrapper.m_BuildActions_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_BuildActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildActionsActions set) { return set.Get(); }
        public void SetCallbacks(IBuildActionsActions instance)
        {
            if (m_Wrapper.m_BuildActionsActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnSelect;
                @MouseMove.started -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnMouseMove;
                @MouseMove.performed -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnMouseMove;
                @MouseMove.canceled -= m_Wrapper.m_BuildActionsActionsCallbackInterface.OnMouseMove;
            }
            m_Wrapper.m_BuildActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
            }
        }
    }
    public BuildActionsActions @BuildActions => new BuildActionsActions(this);
    private int m_KeyBoardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardAndMouseScheme
    {
        get
        {
            if (m_KeyBoardAndMouseSchemeIndex == -1) m_KeyBoardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoardAndMouse");
            return asset.controlSchemes[m_KeyBoardAndMouseSchemeIndex];
        }
    }
    public interface IBuildActionsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
